generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  BLOCKED
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  firstName     String
  lastName      String
  role          UserRole @default(MEMBER)
  avatar        String?
  isActive      Boolean  @default(true)
  emailVerified Boolean  @default(false)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLoginAt   DateTime?

  // Relations
  createdTasks     Task[]         @relation("TaskCreator")
  assignedTasks    TaskAssignee[]
  teamMemberships  TeamMember[]
  createdTeams     Team[]         @relation("TeamCreator")
  createdProjects  Project[]      @relation("ProjectCreator")
  refreshTokens    RefreshToken[]
  notifications    Notification[]
  comments         Comment[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("refresh_tokens")
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  avatar      String?
  color       String?  // For color-coding in Gantt

  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdBy User           @relation("TeamCreator", fields: [createdById], references: [id])
  members   TeamMember[]
  projects  Project[]

  @@index([createdById])
  @@map("teams")
}

model TeamMember {
  id       String   @id @default(uuid())
  teamId   String
  userId   String
  role     TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
  @@map("team_members")
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  status      String    @default("ACTIVE")
  color       String?

  teamId      String
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  team      Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdBy User   @relation("ProjectCreator", fields: [createdById], references: [id])
  tasks     Task[]

  @@index([teamId])
  @@index([createdById])
  @@index([status])
  @@map("projects")
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  projectId   String
  parentId    String?      // For subtasks

  startDate   DateTime
  endDate     DateTime
  duration    Int          // In days
  progress    Int          @default(0) // 0-100

  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  color       String?      // Custom color override
  isLocked    Boolean      @default(false) // Prevent auto-scheduling
  isMilestone Boolean      @default(false)

  createdById String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  project           Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy         User               @relation("TaskCreator", fields: [createdById], references: [id])
  parent            Task?              @relation("TaskHierarchy", fields: [parentId], references: [id])
  subtasks          Task[]             @relation("TaskHierarchy")
  assignees         TaskAssignee[]
  dependencies      TaskDependency[]   @relation("TaskDependencies")
  dependents        TaskDependency[]   @relation("TaskDependents")
  comments          Comment[]

  @@index([projectId])
  @@index([parentId])
  @@index([createdById])
  @@index([status])
  @@index([priority])
  @@map("tasks")
}

model TaskAssignee {
  id       String   @id @default(uuid())
  taskId   String
  userId   String
  assignedAt DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@index([taskId])
  @@index([userId])
  @@map("task_assignees")
}

model TaskDependency {
  id             String         @id @default(uuid())
  taskId         String         // The dependent task
  dependsOnId    String         // The task it depends on
  type           DependencyType @default(FINISH_TO_START)
  lagDays        Int            @default(0) // Lag time in days

  createdAt      DateTime       @default(now())

  task       Task @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOn  Task @relation("TaskDependents", fields: [dependsOnId], references: [id], onDelete: Cascade)

  @@unique([taskId, dependsOnId])
  @@index([taskId])
  @@index([dependsOnId])
  @@map("task_dependencies")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  taskId    String
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@map("comments")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String   // 'TASK_ASSIGNED', 'TASK_UPDATED', 'COMMENT', etc.
  isRead    Boolean  @default(false)
  link      String?  // Link to related resource

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@map("notifications")
}
